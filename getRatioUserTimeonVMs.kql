let HostPoolId = '<hostppol resource id>';
let TimeRangeEnd = now();  // 現在の時間  
let TimeRangeStart = TimeRangeEnd - 30m;  // 現在の時間からx前  
// 仮想マシンの開始イベントを取得  
let StartEvents =   
    AzureActivity  
    | where OperationNameValue == "MICROSOFT.COMPUTE/VIRTUALMACHINES/START/ACTION" and ActivityStatusValue == "Success" and TimeGenerated between (TimeRangeStart .. TimeRangeEnd)  
    | project ResourceId = tolower(_ResourceId), StartTime = TimeGenerated;  
// 仮想マシンの停止イベントを取得  
let StopEvents =   
    AzureActivity  
    | where OperationNameValue == "MICROSOFT.COMPUTE/VIRTUALMACHINES/DEALLOCATE/ACTION" and ActivityStatusValue == "Success" and TimeGenerated between (TimeRangeStart .. TimeRangeEnd)  
    | project ResourceId = tolower(_ResourceId), EndTime = TimeGenerated;  
// 仮想マシンごとの最新の開始イベントを取得  
let LatestStartEvents =   
    StartEvents  
    | summarize arg_max(StartTime, *) by ResourceId;  
// 仮想マシンごとの最新の停止イベントを取得  
let LatestStopEvents =   
    StopEvents  
    | summarize arg_max(EndTime, *) by ResourceId;  
// 停止イベントがあり、再度開始されていないホストのリストを作成  
let StoppedHosts =   
    LatestStopEvents  
    | join kind=anti (LatestStartEvents) on ResourceId  
    | project StoppedHost = ResourceId;  
// 最新の開始イベントに対して停止イベントを結合し、稼働時間を計算  
let RunningTimes =   
    LatestStartEvents  
    | join kind=leftouter (LatestStopEvents) on ResourceId  
    | extend EndTime = iff(isnull(EndTime) or EndTime < StartTime, TimeRangeEnd, EndTime)  // 停止イベントがない場合、または停止イベントが開始イベントより前の場合は現在時刻を使用  
    | where EndTime > StartTime  // EndTimeがStartTimeより後であることを確認  
    | extend Duration = EndTime - StartTime  
    | extend Host = tolower(extract(@"[^/]+$", 0, ResourceId))  
    | summarize TotalOnTime = sum(Duration) by Host;  
// 停止イベントがあった後に再度開始されていないホストを除外  
let FilteredRunningTimes =   
    RunningTimes  
    | join kind=anti (StoppedHosts) on $left.Host == $right.StoppedHost;  
// 結果を時間単位で表示
let HostOnTime =
    FilteredRunningTimes  
    | project Host, TotalOnTimeHours = round(TotalOnTime / 1h, 2);
// 各ユーザーごとの稼働時間を計算  
let UserUsageTime =   
    WVDConnections  
    | where _ResourceId contains HostPooId  
    | where State == "Started" and TimeGenerated between (TimeRangeStart .. TimeRangeEnd)  
    | extend StartTime = TimeGenerated  
    | join kind=leftouter (  
        WVDConnections  
        | where State == "Completed"  
        | extend EndTime = TimeGenerated  
    ) on CorrelationId  
    | extend EndTime = coalesce(EndTime, TimeRangeEnd)  
    | where EndTime >= TimeRangeStart  
    | extend Duration = min_of(EndTime, TimeRangeEnd) - max_of(StartTime, TimeRangeStart)  
    | summarize Duration = sum(Duration) by UserName, Host = tolower(trim_end(@"\..*", SessionHostName))
    | project UserName, Host, UsageHours = round(Duration / 1h, 3);  
// ホストの電源オン時間とユーザーの稼働時間を結合し、比率を計算  
UserUsageTime  
| join kind=inner (HostOnTime) on Host  
| project UserName, Host, UsageHours, TotalOnTimeHours, UsageRatio = round(UsageHours / TotalOnTimeHours, 3)  
 
